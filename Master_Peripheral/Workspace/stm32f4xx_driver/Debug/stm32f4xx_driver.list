
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a5c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000c04  08000c04  00010c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c0c  08000c0c  00010c14  2**0
                  CONTENTS
  4 .ARM          00000000  08000c0c  08000c0c  00010c14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c0c  08000c14  00010c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c14  2**0
                  CONTENTS
 10 .bss          00000040  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c14  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b4e  00000000  00000000  00010c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000559  00000000  00000000  00012792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00012cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000108  00000000  00000000  00012e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002450  00000000  00000000  00012f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016a0  00000000  00000000  00015388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000091da  00000000  00000000  00016a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001fc02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000444  00000000  00000000  0001fc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000bec 	.word	0x08000bec

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000bec 	.word	0x08000bec

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <Init_GPIO_SPI>:

GPIO_Handler_t 	SpiGPIOHandler;
SPI_Handler_t 	SpiHanlder;
GPIO_Handler_t 	Btn;

void Init_GPIO_SPI(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	// Enable clock before setting
	GPIO_PeriClockControl(GPIOB, ENABLE);
 80001fc:	2101      	movs	r1, #1
 80001fe:	4814      	ldr	r0, [pc, #80]	; (8000250 <Init_GPIO_SPI+0x58>)
 8000200:	f000 f8fa 	bl	80003f8 <GPIO_PeriClockControl>

	SpiGPIOHandler.pGPIOx = GPIOB;
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <Init_GPIO_SPI+0x58>)
 8000208:	601a      	str	r2, [r3, #0]
	SpiGPIOHandler.pPinConfig.GPIO_PinAltFunMode = GPIO_AF_05;
 800020a:	4b12      	ldr	r3, [pc, #72]	; (8000254 <Init_GPIO_SPI+0x5c>)
 800020c:	2205      	movs	r2, #5
 800020e:	725a      	strb	r2, [r3, #9]
	SpiGPIOHandler.pPinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000212:	2202      	movs	r2, #2
 8000214:	715a      	strb	r2, [r3, #5]
	SpiGPIOHandler.pPinConfig.GPIO_PinOType = GPIO_OTYPE_PUSH_PULL;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000218:	2200      	movs	r2, #0
 800021a:	721a      	strb	r2, [r3, #8]
	SpiGPIOHandler.pPinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <Init_GPIO_SPI+0x5c>)
 800021e:	2200      	movs	r2, #0
 8000220:	71da      	strb	r2, [r3, #7]
	SpiGPIOHandler.pPinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000224:	2203      	movs	r2, #3
 8000226:	719a      	strb	r2, [r3, #6]

	// Setting pin MOSI
	SpiGPIOHandler.pPinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <Init_GPIO_SPI+0x5c>)
 800022a:	220f      	movs	r2, #15
 800022c:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SpiGPIOHandler);
 800022e:	4809      	ldr	r0, [pc, #36]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000230:	f000 f9ca 	bl	80005c8 <GPIO_Init>

	// Setting pin SCK
	SpiGPIOHandler.pPinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000236:	220d      	movs	r2, #13
 8000238:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SpiGPIOHandler);
 800023a:	4806      	ldr	r0, [pc, #24]	; (8000254 <Init_GPIO_SPI+0x5c>)
 800023c:	f000 f9c4 	bl	80005c8 <GPIO_Init>

	// Setting pin NSS
	SpiGPIOHandler.pPinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000242:	220c      	movs	r2, #12
 8000244:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SpiGPIOHandler);
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Init_GPIO_SPI+0x5c>)
 8000248:	f000 f9be 	bl	80005c8 <GPIO_Init>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40020400 	.word	0x40020400
 8000254:	20000034 	.word	0x20000034

08000258 <SPI_configuration>:

void SPI_configuration(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	//Enable clock for SPI before setting
	SPI_PeriClockControl(SPI2, ENABLE);
 800025c:	2101      	movs	r1, #1
 800025e:	4810      	ldr	r0, [pc, #64]	; (80002a0 <SPI_configuration+0x48>)
 8000260:	f000 fb6e 	bl	8000940 <SPI_PeriClockControl>

	SpiHanlder.pSPIx = SPI2;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <SPI_configuration+0x4c>)
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <SPI_configuration+0x48>)
 8000268:	601a      	str	r2, [r3, #0]
	SpiHanlder.SPIConfig.SPI_BusConfig = SPI_BUSCONFIG_FD;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <SPI_configuration+0x4c>)
 800026c:	2201      	movs	r2, #1
 800026e:	715a      	strb	r2, [r3, #5]
	SpiHanlder.SPIConfig.SPI_CPHA = SPI_CPHA_FIRST_CAPTURE;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <SPI_configuration+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	725a      	strb	r2, [r3, #9]
	SpiHanlder.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <SPI_configuration+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	721a      	strb	r2, [r3, #8]
	SpiHanlder.SPIConfig.SPI_DataFormat = SPI_DFF_8_BIT;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <SPI_configuration+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	71da      	strb	r2, [r3, #7]
	SpiHanlder.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <SPI_configuration+0x4c>)
 8000284:	2201      	movs	r2, #1
 8000286:	711a      	strb	r2, [r3, #4]
	SpiHanlder.SPIConfig.SPI_SSM = SPI_SSM_HW;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <SPI_configuration+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	729a      	strb	r2, [r3, #10]
	SpiHanlder.SPIConfig.SPI_SclkSpeed = SPI_SCLK_DEVIDE_8;
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <SPI_configuration+0x4c>)
 8000290:	2202      	movs	r2, #2
 8000292:	719a      	strb	r2, [r3, #6]

	SPI_Init(&SpiHanlder);
 8000294:	4803      	ldr	r0, [pc, #12]	; (80002a4 <SPI_configuration+0x4c>)
 8000296:	f000 fbab 	bl	80009f0 <SPI_Init>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40003800 	.word	0x40003800
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <GPIO_Btn_Init>:

void GPIO_Btn_Init(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	// Enable clock before setting
	GPIO_PeriClockControl(GPIOA, ENABLE);
 80002ac:	2101      	movs	r1, #1
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <GPIO_Btn_Init+0x3c>)
 80002b0:	f000 f8a2 	bl	80003f8 <GPIO_PeriClockControl>

	Btn.pGPIOx = GPIOA;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <GPIO_Btn_Init+0x40>)
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <GPIO_Btn_Init+0x3c>)
 80002b8:	601a      	str	r2, [r3, #0]
	Btn.pPinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <GPIO_Btn_Init+0x40>)
 80002bc:	2200      	movs	r2, #0
 80002be:	715a      	strb	r2, [r3, #5]
	Btn.pPinConfig.GPIO_PinNumber = GPIO_PIN_00;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <GPIO_Btn_Init+0x40>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	711a      	strb	r2, [r3, #4]
	Btn.pPinConfig.GPIO_PinOType = GPIO_OTYPE_PUSH_PULL;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <GPIO_Btn_Init+0x40>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	721a      	strb	r2, [r3, #8]
	Btn.pPinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <GPIO_Btn_Init+0x40>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	71da      	strb	r2, [r3, #7]
	Btn.pPinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <GPIO_Btn_Init+0x40>)
 80002d4:	2203      	movs	r2, #3
 80002d6:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&Btn);
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <GPIO_Btn_Init+0x40>)
 80002da:	f000 f975 	bl	80005c8 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40020000 	.word	0x40020000
 80002e8:	20000028 	.word	0x20000028

080002ec <delay>:

void delay(){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i <= 500000/2; i++);
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	e002      	b.n	80002fe <delay+0x12>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <delay+0x28>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d9f8      	bls.n	80002f8 <delay+0xc>
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	0003d090 	.word	0x0003d090

08000318 <main>:

int main(){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	char* user_data="Hello\r\n";
 800031e:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <main+0x80>)
 8000320:	607b      	str	r3, [r7, #4]
	/* ------------------------ Setting SPI --------------------------------- */
	// Initialize clock/pin GPIO of SPI
	Init_GPIO_SPI();
 8000322:	f7ff ff69 	bl	80001f8 <Init_GPIO_SPI>
	// Initialize SPI peripheral
	SPI_configuration();
 8000326:	f7ff ff97 	bl	8000258 <SPI_configuration>

	// Configuration SSOE bit if setting SS HW
	/*
	 * SSOE = ENABLE: SS Pin Low when SPE active, otherwise.
	 */
	SPI_EnableSSOEPin(SPI2, ENABLE);
 800032a:	2101      	movs	r1, #1
 800032c:	481b      	ldr	r0, [pc, #108]	; (800039c <main+0x84>)
 800032e:	f000 fbd1 	bl	8000ad4 <SPI_EnableSSOEPin>
	/* ------------------------ Setting Btn --------------------------------- */
	// Initialize GPIO button
	GPIO_Btn_Init();
 8000332:	f7ff ffb9 	bl	80002a8 <GPIO_Btn_Init>

	while(1) {
		// Wait until user press button
		while (!GPIO_ReadFromInputPin(&Btn, GPIO_PIN_00));
 8000336:	bf00      	nop
 8000338:	2100      	movs	r1, #0
 800033a:	4819      	ldr	r0, [pc, #100]	; (80003a0 <main+0x88>)
 800033c:	f000 fae6 	bl	800090c <GPIO_ReadFromInputPin>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <main+0x20>
		delay();
 8000346:	f7ff ffd1 	bl	80002ec <delay>

		/* ------------------- Start a transmittion ------------------------- */
		// Enable SPI
		SPI_EnableSPI(SPI2, ENABLE);
 800034a:	2101      	movs	r1, #1
 800034c:	4813      	ldr	r0, [pc, #76]	; (800039c <main+0x84>)
 800034e:	f000 fba5 	bl	8000a9c <SPI_EnableSPI>

		// Send length of data to ARDUINO slave
		uint8_t data_len = strlen(user_data);
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f7ff ff48 	bl	80001e8 <strlen>
 8000358:	4603      	mov	r3, r0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &data_len, 1);
 800035e:	1cfb      	adds	r3, r7, #3
 8000360:	2201      	movs	r2, #1
 8000362:	4619      	mov	r1, r3
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <main+0x84>)
 8000366:	f000 fbe5 	bl	8000b34 <SPI_SendData>

		// Send data to ARDUINO slave
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f7ff ff3c 	bl	80001e8 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	4809      	ldr	r0, [pc, #36]	; (800039c <main+0x84>)
 8000378:	f000 fbdc 	bl	8000b34 <SPI_SendData>

		// Confirm SPI is not busy
		while(GetStatusFlag(SPI2, SPI_FLAG_BSY));
 800037c:	bf00      	nop
 800037e:	2180      	movs	r1, #128	; 0x80
 8000380:	4806      	ldr	r0, [pc, #24]	; (800039c <main+0x84>)
 8000382:	f000 fbc3 	bl	8000b0c <GetStatusFlag>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f8      	bne.n	800037e <main+0x66>

		// Disable SPI
		SPI_EnableSPI(SPI2, DISABLE);
 800038c:	2100      	movs	r1, #0
 800038e:	4803      	ldr	r0, [pc, #12]	; (800039c <main+0x84>)
 8000390:	f000 fb84 	bl	8000a9c <SPI_EnableSPI>
	while(1) {
 8000394:	e7cf      	b.n	8000336 <main+0x1e>
 8000396:	bf00      	nop
 8000398:	08000c04 	.word	0x08000c04
 800039c:	40003800 	.word	0x40003800
 80003a0:	20000028 	.word	0x20000028

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 fbe7 	bl	8000ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff ff9f 	bl	8000318 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000c14 	.word	0x08000c14
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	20000040 	.word	0x20000040

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <GPIO_PeriClockControl>:
 *
 * @return					- None
 *
 * @note					- None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t En_Dis) {
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	70fb      	strb	r3, [r7, #3]
	if (En_Dis == ENABLE){
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d162      	bne.n	80004d0 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a64      	ldr	r2, [pc, #400]	; (80005a0 <GPIO_PeriClockControl+0x1a8>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000412:	4b64      	ldr	r3, [pc, #400]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a63      	ldr	r2, [pc, #396]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DIS();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DIS();
	}
}
 800041e:	e0b9      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a61      	ldr	r2, [pc, #388]	; (80005a8 <GPIO_PeriClockControl+0x1b0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000428:	4b5e      	ldr	r3, [pc, #376]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a5d      	ldr	r2, [pc, #372]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800042e:	f043 0302 	orr.w	r3, r3, #2
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e0ae      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a5c      	ldr	r2, [pc, #368]	; (80005ac <GPIO_PeriClockControl+0x1b4>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800043e:	4b59      	ldr	r3, [pc, #356]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a58      	ldr	r2, [pc, #352]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000444:	f043 0304 	orr.w	r3, r3, #4
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e0a3      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a58      	ldr	r2, [pc, #352]	; (80005b0 <GPIO_PeriClockControl+0x1b8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000454:	4b53      	ldr	r3, [pc, #332]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a52      	ldr	r2, [pc, #328]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e098      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a53      	ldr	r2, [pc, #332]	; (80005b4 <GPIO_PeriClockControl+0x1bc>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800046a:	4b4e      	ldr	r3, [pc, #312]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a4d      	ldr	r2, [pc, #308]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000470:	f043 0310 	orr.w	r3, r3, #16
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e08d      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a4f      	ldr	r2, [pc, #316]	; (80005b8 <GPIO_PeriClockControl+0x1c0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000480:	4b48      	ldr	r3, [pc, #288]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a47      	ldr	r2, [pc, #284]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e082      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a4a      	ldr	r2, [pc, #296]	; (80005bc <GPIO_PeriClockControl+0x1c4>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000496:	4b43      	ldr	r3, [pc, #268]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a42      	ldr	r2, [pc, #264]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800049c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e077      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a46      	ldr	r2, [pc, #280]	; (80005c0 <GPIO_PeriClockControl+0x1c8>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004ac:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a3c      	ldr	r2, [pc, #240]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e06c      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a41      	ldr	r2, [pc, #260]	; (80005c4 <GPIO_PeriClockControl+0x1cc>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d168      	bne.n	8000594 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80004c2:	4b38      	ldr	r3, [pc, #224]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a37      	ldr	r2, [pc, #220]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e061      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a33      	ldr	r2, [pc, #204]	; (80005a0 <GPIO_PeriClockControl+0x1a8>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 80004d8:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a31      	ldr	r2, [pc, #196]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e056      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a2f      	ldr	r2, [pc, #188]	; (80005a8 <GPIO_PeriClockControl+0x1b0>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 80004f4:	f023 0302 	bic.w	r3, r3, #2
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e04b      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <GPIO_PeriClockControl+0x1b4>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 8000504:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800050a:	f023 0304 	bic.w	r3, r3, #4
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e040      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a26      	ldr	r2, [pc, #152]	; (80005b0 <GPIO_PeriClockControl+0x1b8>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000520:	f023 0308 	bic.w	r3, r3, #8
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	e035      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a22      	ldr	r2, [pc, #136]	; (80005b4 <GPIO_PeriClockControl+0x1bc>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000536:	f023 0310 	bic.w	r3, r3, #16
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053c:	e02a      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a1d      	ldr	r2, [pc, #116]	; (80005b8 <GPIO_PeriClockControl+0x1c0>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800054c:	f023 0320 	bic.w	r3, r3, #32
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000552:	e01f      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a19      	ldr	r2, [pc, #100]	; (80005bc <GPIO_PeriClockControl+0x1c4>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	e014      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <GPIO_PeriClockControl+0x1c8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 8000578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057e:	e009      	b.n	8000594 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <GPIO_PeriClockControl+0x1cc>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d105      	bne.n	8000594 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <GPIO_PeriClockControl+0x1ac>)
 800058e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40021400 	.word	0x40021400
 80005bc:	40021800 	.word	0x40021800
 80005c0:	40021c00 	.word	0x40021c00
 80005c4:	40022000 	.word	0x40022000

080005c8 <GPIO_Init>:
 *
 * @return					- None
 *
 * @note					- None
 */
void GPIO_Init(GPIO_Handler_t* pGPIOHandler) {
 80005c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005cc:	b087      	sub	sp, #28
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	__IO uint32_t reg_value = 0;
 80005d2:	2100      	movs	r1, #0
 80005d4:	6139      	str	r1, [r7, #16]

	// 1. Setting mode
	// Check interrupts of non-interrupt
	if (pGPIOHandler->pPinConfig.GPIO_PinMode <= GPIO_MODE_ANOLOG) {
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	7949      	ldrb	r1, [r1, #5]
 80005da:	2903      	cmp	r1, #3
 80005dc:	d81f      	bhi.n	800061e <GPIO_Init+0x56>
		// non-interrupt
		reg_value = (pGPIOHandler->pPinConfig.GPIO_PinMode << \
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	7949      	ldrb	r1, [r1, #5]
 80005e2:	4608      	mov	r0, r1
				(2 * pGPIOHandler->pPinConfig.GPIO_PinNumber));
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	7909      	ldrb	r1, [r1, #4]
 80005e8:	0049      	lsls	r1, r1, #1
		reg_value = (pGPIOHandler->pPinConfig.GPIO_PinMode << \
 80005ea:	fa00 f101 	lsl.w	r1, r0, r1
 80005ee:	6139      	str	r1, [r7, #16]
		pGPIOHandler->pGPIOx->MODER &= ~(0x3 << \
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	6809      	ldr	r1, [r1, #0]
 80005f4:	6808      	ldr	r0, [r1, #0]
				pGPIOHandler->pPinConfig.GPIO_PinNumber); //Clear old setting
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	7909      	ldrb	r1, [r1, #4]
 80005fa:	460e      	mov	r6, r1
		pGPIOHandler->pGPIOx->MODER &= ~(0x3 << \
 80005fc:	2103      	movs	r1, #3
 80005fe:	40b1      	lsls	r1, r6
 8000600:	43c9      	mvns	r1, r1
 8000602:	460e      	mov	r6, r1
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	6809      	ldr	r1, [r1, #0]
 8000608:	4030      	ands	r0, r6
 800060a:	6008      	str	r0, [r1, #0]
		pGPIOHandler->pGPIOx->MODER |= reg_value;
 800060c:	693e      	ldr	r6, [r7, #16]
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	6809      	ldr	r1, [r1, #0]
 8000612:	6808      	ldr	r0, [r1, #0]
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	6809      	ldr	r1, [r1, #0]
 8000618:	4330      	orrs	r0, r6
 800061a:	6008      	str	r0, [r1, #0]
 800061c:	e0c9      	b.n	80007b2 <GPIO_Init+0x1ea>
	}
	else {
		// Setting EXTI_RTSR and EXTI_FTSR corresponding with EXT lines
		if (pGPIOHandler->pPinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RT) {
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	7949      	ldrb	r1, [r1, #5]
 8000622:	2904      	cmp	r1, #4
 8000624:	d117      	bne.n	8000656 <GPIO_Init+0x8e>
			EXTI->RTSR |= (1 << pGPIOHandler->pPinConfig.GPIO_PinNumber);
 8000626:	4950      	ldr	r1, [pc, #320]	; (8000768 <GPIO_Init+0x1a0>)
 8000628:	6889      	ldr	r1, [r1, #8]
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	7900      	ldrb	r0, [r0, #4]
 800062e:	4606      	mov	r6, r0
 8000630:	2001      	movs	r0, #1
 8000632:	40b0      	lsls	r0, r6
 8000634:	4606      	mov	r6, r0
 8000636:	484c      	ldr	r0, [pc, #304]	; (8000768 <GPIO_Init+0x1a0>)
 8000638:	4331      	orrs	r1, r6
 800063a:	6081      	str	r1, [r0, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandler->pPinConfig.GPIO_PinNumber);
 800063c:	494a      	ldr	r1, [pc, #296]	; (8000768 <GPIO_Init+0x1a0>)
 800063e:	68c9      	ldr	r1, [r1, #12]
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	7900      	ldrb	r0, [r0, #4]
 8000644:	4606      	mov	r6, r0
 8000646:	2001      	movs	r0, #1
 8000648:	40b0      	lsls	r0, r6
 800064a:	43c0      	mvns	r0, r0
 800064c:	4606      	mov	r6, r0
 800064e:	4846      	ldr	r0, [pc, #280]	; (8000768 <GPIO_Init+0x1a0>)
 8000650:	4031      	ands	r1, r6
 8000652:	60c1      	str	r1, [r0, #12]
 8000654:	e035      	b.n	80006c2 <GPIO_Init+0xfa>
		}
		else if (pGPIOHandler->pPinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FT) {
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	7949      	ldrb	r1, [r1, #5]
 800065a:	2905      	cmp	r1, #5
 800065c:	d117      	bne.n	800068e <GPIO_Init+0xc6>
			EXTI->FTSR |= (1 << pGPIOHandler->pPinConfig.GPIO_PinNumber);
 800065e:	4942      	ldr	r1, [pc, #264]	; (8000768 <GPIO_Init+0x1a0>)
 8000660:	68c9      	ldr	r1, [r1, #12]
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	7900      	ldrb	r0, [r0, #4]
 8000666:	4606      	mov	r6, r0
 8000668:	2001      	movs	r0, #1
 800066a:	40b0      	lsls	r0, r6
 800066c:	4606      	mov	r6, r0
 800066e:	483e      	ldr	r0, [pc, #248]	; (8000768 <GPIO_Init+0x1a0>)
 8000670:	4331      	orrs	r1, r6
 8000672:	60c1      	str	r1, [r0, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandler->pPinConfig.GPIO_PinNumber);
 8000674:	493c      	ldr	r1, [pc, #240]	; (8000768 <GPIO_Init+0x1a0>)
 8000676:	6889      	ldr	r1, [r1, #8]
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	7900      	ldrb	r0, [r0, #4]
 800067c:	4606      	mov	r6, r0
 800067e:	2001      	movs	r0, #1
 8000680:	40b0      	lsls	r0, r6
 8000682:	43c0      	mvns	r0, r0
 8000684:	4606      	mov	r6, r0
 8000686:	4838      	ldr	r0, [pc, #224]	; (8000768 <GPIO_Init+0x1a0>)
 8000688:	4031      	ands	r1, r6
 800068a:	6081      	str	r1, [r0, #8]
 800068c:	e019      	b.n	80006c2 <GPIO_Init+0xfa>
		}
		else if (pGPIOHandler->pPinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RFT) {
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	7949      	ldrb	r1, [r1, #5]
 8000692:	2906      	cmp	r1, #6
 8000694:	d115      	bne.n	80006c2 <GPIO_Init+0xfa>
			EXTI->FTSR |= (1 << pGPIOHandler->pPinConfig.GPIO_PinNumber);
 8000696:	4934      	ldr	r1, [pc, #208]	; (8000768 <GPIO_Init+0x1a0>)
 8000698:	68c9      	ldr	r1, [r1, #12]
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	7900      	ldrb	r0, [r0, #4]
 800069e:	4606      	mov	r6, r0
 80006a0:	2001      	movs	r0, #1
 80006a2:	40b0      	lsls	r0, r6
 80006a4:	4606      	mov	r6, r0
 80006a6:	4830      	ldr	r0, [pc, #192]	; (8000768 <GPIO_Init+0x1a0>)
 80006a8:	4331      	orrs	r1, r6
 80006aa:	60c1      	str	r1, [r0, #12]
			EXTI->RTSR |= (1 << pGPIOHandler->pPinConfig.GPIO_PinNumber);
 80006ac:	492e      	ldr	r1, [pc, #184]	; (8000768 <GPIO_Init+0x1a0>)
 80006ae:	6889      	ldr	r1, [r1, #8]
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	7900      	ldrb	r0, [r0, #4]
 80006b4:	4606      	mov	r6, r0
 80006b6:	2001      	movs	r0, #1
 80006b8:	40b0      	lsls	r0, r6
 80006ba:	4606      	mov	r6, r0
 80006bc:	482a      	ldr	r0, [pc, #168]	; (8000768 <GPIO_Init+0x1a0>)
 80006be:	4331      	orrs	r1, r6
 80006c0:	6081      	str	r1, [r0, #8]
		}

		// 2. Configuration mask bit 23 interrupt lines
		EXTI->IMR |= (1 << pGPIOHandler->pPinConfig.GPIO_PinNumber);
 80006c2:	4929      	ldr	r1, [pc, #164]	; (8000768 <GPIO_Init+0x1a0>)
 80006c4:	6809      	ldr	r1, [r1, #0]
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	7900      	ldrb	r0, [r0, #4]
 80006ca:	4606      	mov	r6, r0
 80006cc:	2001      	movs	r0, #1
 80006ce:	40b0      	lsls	r0, r6
 80006d0:	4606      	mov	r6, r0
 80006d2:	4825      	ldr	r0, [pc, #148]	; (8000768 <GPIO_Init+0x1a0>)
 80006d4:	4331      	orrs	r1, r6
 80006d6:	6001      	str	r1, [r0, #0]

		// 3. Select which port connect to EXTIx line
		SYSCFG_PCLK_EN();
 80006d8:	4924      	ldr	r1, [pc, #144]	; (800076c <GPIO_Init+0x1a4>)
 80006da:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80006dc:	4823      	ldr	r0, [pc, #140]	; (800076c <GPIO_Init+0x1a4>)
 80006de:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80006e2:	6441      	str	r1, [r0, #68]	; 0x44
		reg_value = (pGPIOHandler->pPinConfig.GPIO_PinNumber);
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	7909      	ldrb	r1, [r1, #4]
 80006e8:	6139      	str	r1, [r7, #16]
		uint8_t portcode = GPIO_PORT_DECODE(pGPIOHandler->pGPIOx)
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	6809      	ldr	r1, [r1, #0]
 80006ee:	4820      	ldr	r0, [pc, #128]	; (8000770 <GPIO_Init+0x1a8>)
 80006f0:	4281      	cmp	r1, r0
 80006f2:	d04f      	beq.n	8000794 <GPIO_Init+0x1cc>
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	6809      	ldr	r1, [r1, #0]
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <GPIO_Init+0x1ac>)
 80006fa:	4281      	cmp	r1, r0
 80006fc:	d032      	beq.n	8000764 <GPIO_Init+0x19c>
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	6809      	ldr	r1, [r1, #0]
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <GPIO_Init+0x1b0>)
 8000704:	4281      	cmp	r1, r0
 8000706:	d02b      	beq.n	8000760 <GPIO_Init+0x198>
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	6809      	ldr	r1, [r1, #0]
 800070c:	481b      	ldr	r0, [pc, #108]	; (800077c <GPIO_Init+0x1b4>)
 800070e:	4281      	cmp	r1, r0
 8000710:	d024      	beq.n	800075c <GPIO_Init+0x194>
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	6809      	ldr	r1, [r1, #0]
 8000716:	481a      	ldr	r0, [pc, #104]	; (8000780 <GPIO_Init+0x1b8>)
 8000718:	4281      	cmp	r1, r0
 800071a:	d01d      	beq.n	8000758 <GPIO_Init+0x190>
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	6809      	ldr	r1, [r1, #0]
 8000720:	4818      	ldr	r0, [pc, #96]	; (8000784 <GPIO_Init+0x1bc>)
 8000722:	4281      	cmp	r1, r0
 8000724:	d016      	beq.n	8000754 <GPIO_Init+0x18c>
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	6809      	ldr	r1, [r1, #0]
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <GPIO_Init+0x1c0>)
 800072c:	4281      	cmp	r1, r0
 800072e:	d00f      	beq.n	8000750 <GPIO_Init+0x188>
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	6809      	ldr	r1, [r1, #0]
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <GPIO_Init+0x1c4>)
 8000736:	4281      	cmp	r1, r0
 8000738:	d008      	beq.n	800074c <GPIO_Init+0x184>
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	6809      	ldr	r1, [r1, #0]
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <GPIO_Init+0x1c8>)
 8000740:	4281      	cmp	r1, r0
 8000742:	d101      	bne.n	8000748 <GPIO_Init+0x180>
 8000744:	2108      	movs	r1, #8
 8000746:	e026      	b.n	8000796 <GPIO_Init+0x1ce>
 8000748:	2100      	movs	r1, #0
 800074a:	e024      	b.n	8000796 <GPIO_Init+0x1ce>
 800074c:	2107      	movs	r1, #7
 800074e:	e022      	b.n	8000796 <GPIO_Init+0x1ce>
 8000750:	2106      	movs	r1, #6
 8000752:	e020      	b.n	8000796 <GPIO_Init+0x1ce>
 8000754:	2105      	movs	r1, #5
 8000756:	e01e      	b.n	8000796 <GPIO_Init+0x1ce>
 8000758:	2104      	movs	r1, #4
 800075a:	e01c      	b.n	8000796 <GPIO_Init+0x1ce>
 800075c:	2103      	movs	r1, #3
 800075e:	e01a      	b.n	8000796 <GPIO_Init+0x1ce>
 8000760:	2102      	movs	r1, #2
 8000762:	e018      	b.n	8000796 <GPIO_Init+0x1ce>
 8000764:	2101      	movs	r1, #1
 8000766:	e016      	b.n	8000796 <GPIO_Init+0x1ce>
 8000768:	40013c00 	.word	0x40013c00
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000
 8000774:	40020400 	.word	0x40020400
 8000778:	40020800 	.word	0x40020800
 800077c:	40020c00 	.word	0x40020c00
 8000780:	40021000 	.word	0x40021000
 8000784:	40021400 	.word	0x40021400
 8000788:	40021800 	.word	0x40021800
 800078c:	40021c00 	.word	0x40021c00
 8000790:	40022000 	.word	0x40022000
 8000794:	2100      	movs	r1, #0
 8000796:	75f9      	strb	r1, [r7, #23]
		SYSCFG->EXTICR[reg_value/4] = ( portcode << (4 * (reg_value % 4)));
 8000798:	7df8      	ldrb	r0, [r7, #23]
 800079a:	6939      	ldr	r1, [r7, #16]
 800079c:	f001 0103 	and.w	r1, r1, #3
 80007a0:	0089      	lsls	r1, r1, #2
 80007a2:	fa00 f601 	lsl.w	r6, r0, r1
 80007a6:	4858      	ldr	r0, [pc, #352]	; (8000908 <GPIO_Init+0x340>)
 80007a8:	6939      	ldr	r1, [r7, #16]
 80007aa:	0889      	lsrs	r1, r1, #2
 80007ac:	3102      	adds	r1, #2
 80007ae:	f840 6021 	str.w	r6, [r0, r1, lsl #2]

	}

	// 2. Setting speed
	reg_value = (pGPIOHandler->pPinConfig.GPIO_PinSpeed << \
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	7989      	ldrb	r1, [r1, #6]
 80007b6:	4608      	mov	r0, r1
			(2 * pGPIOHandler->pPinConfig.GPIO_PinNumber));
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	7909      	ldrb	r1, [r1, #4]
 80007bc:	0049      	lsls	r1, r1, #1
	reg_value = (pGPIOHandler->pPinConfig.GPIO_PinSpeed << \
 80007be:	fa00 f101 	lsl.w	r1, r0, r1
 80007c2:	6139      	str	r1, [r7, #16]
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0x3 << \
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	6809      	ldr	r1, [r1, #0]
 80007c8:	6888      	ldr	r0, [r1, #8]
			pGPIOHandler->pPinConfig.GPIO_PinNumber);  //Clear old setting
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	7909      	ldrb	r1, [r1, #4]
 80007ce:	460e      	mov	r6, r1
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0x3 << \
 80007d0:	2103      	movs	r1, #3
 80007d2:	40b1      	lsls	r1, r6
 80007d4:	43c9      	mvns	r1, r1
 80007d6:	460e      	mov	r6, r1
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	6809      	ldr	r1, [r1, #0]
 80007dc:	4030      	ands	r0, r6
 80007de:	6088      	str	r0, [r1, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= reg_value;
 80007e0:	693e      	ldr	r6, [r7, #16]
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	6809      	ldr	r1, [r1, #0]
 80007e6:	6888      	ldr	r0, [r1, #8]
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	6809      	ldr	r1, [r1, #0]
 80007ec:	4330      	orrs	r0, r6
 80007ee:	6088      	str	r0, [r1, #8]

	// 3. Setting PU PD
	reg_value = (pGPIOHandler->pPinConfig.GPIO_PinPuPdControl << \
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	79c9      	ldrb	r1, [r1, #7]
 80007f4:	4608      	mov	r0, r1
			(2 * pGPIOHandler->pPinConfig.GPIO_PinNumber));
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	7909      	ldrb	r1, [r1, #4]
 80007fa:	0049      	lsls	r1, r1, #1
	reg_value = (pGPIOHandler->pPinConfig.GPIO_PinPuPdControl << \
 80007fc:	fa00 f101 	lsl.w	r1, r0, r1
 8000800:	6139      	str	r1, [r7, #16]
	pGPIOHandler->pGPIOx->PUPDR &= ~(0x3 << \
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	6809      	ldr	r1, [r1, #0]
 8000806:	68c8      	ldr	r0, [r1, #12]
			pGPIOHandler->pPinConfig.GPIO_PinNumber); //Clear old setting
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	7909      	ldrb	r1, [r1, #4]
 800080c:	460e      	mov	r6, r1
	pGPIOHandler->pGPIOx->PUPDR &= ~(0x3 << \
 800080e:	2103      	movs	r1, #3
 8000810:	40b1      	lsls	r1, r6
 8000812:	43c9      	mvns	r1, r1
 8000814:	460e      	mov	r6, r1
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	6809      	ldr	r1, [r1, #0]
 800081a:	4030      	ands	r0, r6
 800081c:	60c8      	str	r0, [r1, #12]
	pGPIOHandler->pGPIOx->PUPDR |= reg_value;
 800081e:	693e      	ldr	r6, [r7, #16]
 8000820:	6879      	ldr	r1, [r7, #4]
 8000822:	6809      	ldr	r1, [r1, #0]
 8000824:	68c8      	ldr	r0, [r1, #12]
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	6809      	ldr	r1, [r1, #0]
 800082a:	4330      	orrs	r0, r6
 800082c:	60c8      	str	r0, [r1, #12]

	// 4. Setting OTYPE
	reg_value = (pGPIOHandler->pPinConfig.GPIO_PinOType << \
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	7a09      	ldrb	r1, [r1, #8]
 8000832:	4608      	mov	r0, r1
			pGPIOHandler->pPinConfig.GPIO_PinNumber);
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	7909      	ldrb	r1, [r1, #4]
	reg_value = (pGPIOHandler->pPinConfig.GPIO_PinOType << \
 8000838:	fa00 f101 	lsl.w	r1, r0, r1
 800083c:	6139      	str	r1, [r7, #16]
	pGPIOHandler->pGPIOx->OTYPER &= ~(0x1 << \
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	6809      	ldr	r1, [r1, #0]
 8000842:	6848      	ldr	r0, [r1, #4]
			pGPIOHandler->pPinConfig.GPIO_PinNumber); //Clear old setting
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	7909      	ldrb	r1, [r1, #4]
 8000848:	460e      	mov	r6, r1
	pGPIOHandler->pGPIOx->OTYPER &= ~(0x1 << \
 800084a:	2101      	movs	r1, #1
 800084c:	40b1      	lsls	r1, r6
 800084e:	43c9      	mvns	r1, r1
 8000850:	460e      	mov	r6, r1
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	6809      	ldr	r1, [r1, #0]
 8000856:	4030      	ands	r0, r6
 8000858:	6048      	str	r0, [r1, #4]
	pGPIOHandler->pGPIOx->OTYPER |= reg_value;
 800085a:	693e      	ldr	r6, [r7, #16]
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	6809      	ldr	r1, [r1, #0]
 8000860:	6848      	ldr	r0, [r1, #4]
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	6809      	ldr	r1, [r1, #0]
 8000866:	4330      	orrs	r0, r6
 8000868:	6048      	str	r0, [r1, #4]

	// 5. Check Mode Alternate or not :: setting Alternate function
	if (pGPIOHandler->pPinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	7949      	ldrb	r1, [r1, #5]
 800086e:	2902      	cmp	r1, #2
 8000870:	d144      	bne.n	80008fc <GPIO_Init+0x334>
		__IO uint64_t ALT_Reg_Value = 0;
 8000872:	f04f 0000 	mov.w	r0, #0
 8000876:	f04f 0100 	mov.w	r1, #0
 800087a:	e9c7 0102 	strd	r0, r1, [r7, #8]
		ALT_Reg_Value = ((uint64_t)pGPIOHandler->pPinConfig.GPIO_PinAltFunMode << \
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	7a49      	ldrb	r1, [r1, #9]
 8000882:	b2c8      	uxtb	r0, r1
 8000884:	f04f 0100 	mov.w	r1, #0
				(4 * (uint64_t)pGPIOHandler->pPinConfig.GPIO_PinNumber));
 8000888:	687e      	ldr	r6, [r7, #4]
 800088a:	7936      	ldrb	r6, [r6, #4]
 800088c:	00b6      	lsls	r6, r6, #2
		ALT_Reg_Value = ((uint64_t)pGPIOHandler->pPinConfig.GPIO_PinAltFunMode << \
 800088e:	f1a6 0e20 	sub.w	lr, r6, #32
 8000892:	f1c6 0c20 	rsb	ip, r6, #32
 8000896:	fa01 f306 	lsl.w	r3, r1, r6
 800089a:	fa00 fe0e 	lsl.w	lr, r0, lr
 800089e:	ea43 030e 	orr.w	r3, r3, lr
 80008a2:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008a6:	ea43 030c 	orr.w	r3, r3, ip
 80008aa:	fa00 f206 	lsl.w	r2, r0, r6
 80008ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
		pGPIOHandler->pGPIOx->AFR.BothReg &= ~(uint64_t)(0xf << \
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
				(4 * (uint64_t)pGPIOHandler->pPinConfig.GPIO_PinNumber)); //Clear old setting
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	7909      	ldrb	r1, [r1, #4]
 80008be:	0089      	lsls	r1, r1, #2
		pGPIOHandler->pGPIOx->AFR.BothReg &= ~(uint64_t)(0xf << \
 80008c0:	200f      	movs	r0, #15
 80008c2:	fa00 f101 	lsl.w	r1, r0, r1
 80008c6:	4608      	mov	r0, r1
 80008c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80008cc:	43c4      	mvns	r4, r0
 80008ce:	43cd      	mvns	r5, r1
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	6809      	ldr	r1, [r1, #0]
 80008d4:	ea02 0a04 	and.w	sl, r2, r4
 80008d8:	ea03 0b05 	and.w	fp, r3, r5
 80008dc:	e9c1 ab08 	strd	sl, fp, [r1, #32]
		pGPIOHandler->pGPIOx->AFR.BothReg |= ALT_Reg_Value;
 80008e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80008ec:	687c      	ldr	r4, [r7, #4]
 80008ee:	6824      	ldr	r4, [r4, #0]
 80008f0:	ea40 0802 	orr.w	r8, r0, r2
 80008f4:	ea41 0903 	orr.w	r9, r1, r3
 80008f8:	e9c4 8908 	strd	r8, r9, [r4, #32]
	}
	else {
		// Do nothing
	}
}
 80008fc:	bf00      	nop
 80008fe:	371c      	adds	r7, #28
 8000900:	46bd      	mov	sp, r7
 8000902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000906:	bf00      	nop
 8000908:	40013800 	.word	0x40013800

0800090c <GPIO_ReadFromInputPin>:
 *
 * @return					- GPIO_PIN_SET or GPIO_PIN_RESET macros
 *
 * @note					- None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Handler_t* pGPIOHandler, uint8_t PinNumber) {
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
	__IO uint8_t temp;
	temp = (uint8_t)((pGPIOHandler->pGPIOx->IDR >> PinNumber) & 0x0001);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	691a      	ldr	r2, [r3, #16]
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	fa22 f303 	lsr.w	r3, r2, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	73fb      	strb	r3, [r7, #15]
	return temp;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	b2db      	uxtb	r3, r3
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <SPI_PeriClockControl>:
 *
 * @return					- None
 *
 * @note					- None
 */
void SPI_PeriClockControl(SPI_RegDef_t* pSPIx, uint8_t En_Dis) {
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
	if (En_Dis == ENABLE){
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d120      	bne.n	8000994 <SPI_PeriClockControl+0x54>
		if (pSPIx == SPI1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <SPI_PeriClockControl+0xa0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d106      	bne.n	8000968 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 8000960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DIS();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DIS();
	}
}
 8000966:	e035      	b.n	80009d4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <SPI_PeriClockControl+0xa8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d106      	bne.n	800097e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800097c:	e02a      	b.n	80009d4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <SPI_PeriClockControl+0xac>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d126      	bne.n	80009d4 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 800098c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000992:	e01f      	b.n	80009d4 <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <SPI_PeriClockControl+0xa0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d106      	bne.n	80009aa <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DIS();
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 800099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a0:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 80009a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009a8:	e014      	b.n	80009d4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <SPI_PeriClockControl+0xa8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DIS();
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 80009b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009be:	e009      	b.n	80009d4 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <SPI_PeriClockControl+0xac>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d105      	bne.n	80009d4 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DIS();
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SPI_PeriClockControl+0xa4>)
 80009ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40013000 	.word	0x40013000
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40003800 	.word	0x40003800
 80009ec:	40003c00 	.word	0x40003c00

080009f0 <SPI_Init>:
 *
 * @return					- None
 *
 * @note					- None
 */
void SPI_Init(SPI_Handler_t* pSPIHandler) {
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	__IO uint32_t tempreg = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]

	// Setting Device mode: Master or Slave
	tempreg |= pSPIHandler->SPIConfig.SPI_DeviceMode << SPIBITs_MSTR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]

	// Setting Bus Configuration
	if (pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_FD) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	795b      	ldrb	r3, [r3, #5]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d104      	bne.n	8000a1c <SPI_Init+0x2c>
		// BIDI Mode should be 0: 2-line unidirectional data
		tempreg &= ~(1 << SPIBITs_BIDIMODE);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e007      	b.n	8000a2c <SPI_Init+0x3c>
	}
	else if (pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_HD) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d103      	bne.n	8000a2c <SPI_Init+0x3c>
		// BIDE Mode should be 1: 1-line bidirectional data
		tempreg |= (1 << SPIBITs_BIDIMODE);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2a:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandler->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_SD_RXONLY) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	795b      	ldrb	r3, [r3, #5]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d107      	bne.n	8000a44 <SPI_Init+0x54>
		// BIDI Mode should be 0: 2-line unidirectional data
		tempreg &= ~(1 << SPIBITs_BIDIMODE);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a3a:	60fb      	str	r3, [r7, #12]
		// RXONLY should be 1: Setting Receive mode only
		tempreg |= (1 << SPIBITs_RXONLY);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a42:	60fb      	str	r3, [r7, #12]
	}

	// Setting Speed
	tempreg |= pSPIHandler->SPIConfig.SPI_SclkSpeed << SPIBITs_BR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	799b      	ldrb	r3, [r3, #6]
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]

	// Setting DFF
	tempreg |= pSPIHandler->SPIConfig.SPI_DataFormat << SPIBITs_DFF;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	79db      	ldrb	r3, [r3, #7]
 8000a56:	02db      	lsls	r3, r3, #11
 8000a58:	461a      	mov	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

	// Setting SPI_CPOL
	tempreg |= pSPIHandler->SPIConfig.SPI_CPOL << SPIBITs_CPOL;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7a1b      	ldrb	r3, [r3, #8]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]

	// Setting SPI_CPHA
	tempreg |= pSPIHandler->SPIConfig.SPI_CPHA << SPIBITs_CPHA;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7a5b      	ldrb	r3, [r3, #9]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]

	// Setting SPI_SSM
	tempreg |= pSPIHandler->SPIConfig.SPI_SSM << SPIBITs_SSM;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7a9b      	ldrb	r3, [r3, #10]
 8000a7e:	025b      	lsls	r3, r3, #9
 8000a80:	461a      	mov	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

	pSPIHandler->pSPIx->CR1 = tempreg;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SPI_EnableSPI>:
 *
 * @return					- None
 *
 * @note					- None
 */
void SPI_EnableSPI(SPI_RegDef_t* pSPIx, uint8_t En_Dis){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
	if (En_Dis == ENABLE) {
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d106      	bne.n	8000abc <SPI_EnableSPI+0x20>
		//Enable SPI peripheral
		pSPIx->CR1 |= (1 << SPIBITs_SPE);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else {
		//Disable SPI peripheral
		pSPIx->CR1 &= ~(1 << SPIBITs_SPE);
	}
}
 8000aba:	e005      	b.n	8000ac8 <SPI_EnableSPI+0x2c>
		pSPIx->CR1 &= ~(1 << SPIBITs_SPE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SPI_EnableSSOEPin>:
 *
 * @return					- None
 *
 * @note					- None
 */
void SPI_EnableSSOEPin(SPI_RegDef_t* pSPIx, uint8_t En_Dis){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	if (En_Dis == ENABLE) {
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <SPI_EnableSSOEPin+0x20>
		//Enable SPI peripheral
		pSPIx->CR2 |= (1 << SPIBITs_SSOE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f043 0204 	orr.w	r2, r3, #4
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	605a      	str	r2, [r3, #4]
	}
	else {
		//Disable SPI peripheral
		pSPIx->CR2 &= ~(1 << SPIBITs_SSOE);
	}
}
 8000af2:	e005      	b.n	8000b00 <SPI_EnableSSOEPin+0x2c>
		pSPIx->CR2 &= ~(1 << SPIBITs_SSOE);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f023 0204 	bic.w	r2, r3, #4
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	605a      	str	r2, [r3, #4]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <GetStatusFlag>:
 *
 * @return					- True/False
 *
 * @note					- None
 */
uint8_t GetStatusFlag(SPI_RegDef_t* pSPIx, uint32_t Mask) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & Mask)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <GetStatusFlag+0x1a>
		return 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <GetStatusFlag+0x1c>
	return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SPI_SendData>:
 *
 * @return					- None
 *
 * @note					- None
 */
void SPI_SendData(SPI_RegDef_t* pSPIx, uint8_t* pTxBuffer, uint32_t len){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	while (len > 0){
 8000b40:	e027      	b.n	8000b92 <SPI_SendData+0x5e>
		// Wait TX buffer empty: TXE bit
		while (GetStatusFlag(pSPIx, SPI_FLAG_TXE) == 0);
 8000b42:	bf00      	nop
 8000b44:	2102      	movs	r1, #2
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ffe0 	bl	8000b0c <GetStatusFlag>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f8      	beq.n	8000b44 <SPI_SendData+0x10>

		// Check DFF bit to send data
		if ((pSPIx->CR1 & (1 << SPIBITs_DFF)) == 0) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10b      	bne.n	8000b76 <SPI_SendData+0x42>
			// Send 8 bit
			pSPIx->DR = *pTxBuffer;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	60da      	str	r2, [r3, #12]
			len--;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	e00d      	b.n	8000b92 <SPI_SendData+0x5e>
		}
		else {
			// Send 16 bit
			pSPIx->DR = *((uint16_t* )pTxBuffer);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	60da      	str	r2, [r3, #12]
			len--;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
			len--;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
			(uint16_t* )pTxBuffer++;
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
	while (len > 0){
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d4      	bne.n	8000b42 <SPI_SendData+0xe>
		}
	}
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <__libc_init_array>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4d0d      	ldr	r5, [pc, #52]	; (8000bdc <__libc_init_array+0x38>)
 8000ba8:	4c0d      	ldr	r4, [pc, #52]	; (8000be0 <__libc_init_array+0x3c>)
 8000baa:	1b64      	subs	r4, r4, r5
 8000bac:	10a4      	asrs	r4, r4, #2
 8000bae:	2600      	movs	r6, #0
 8000bb0:	42a6      	cmp	r6, r4
 8000bb2:	d109      	bne.n	8000bc8 <__libc_init_array+0x24>
 8000bb4:	4d0b      	ldr	r5, [pc, #44]	; (8000be4 <__libc_init_array+0x40>)
 8000bb6:	4c0c      	ldr	r4, [pc, #48]	; (8000be8 <__libc_init_array+0x44>)
 8000bb8:	f000 f818 	bl	8000bec <_init>
 8000bbc:	1b64      	subs	r4, r4, r5
 8000bbe:	10a4      	asrs	r4, r4, #2
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	42a6      	cmp	r6, r4
 8000bc4:	d105      	bne.n	8000bd2 <__libc_init_array+0x2e>
 8000bc6:	bd70      	pop	{r4, r5, r6, pc}
 8000bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bcc:	4798      	blx	r3
 8000bce:	3601      	adds	r6, #1
 8000bd0:	e7ee      	b.n	8000bb0 <__libc_init_array+0xc>
 8000bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd6:	4798      	blx	r3
 8000bd8:	3601      	adds	r6, #1
 8000bda:	e7f2      	b.n	8000bc2 <__libc_init_array+0x1e>
 8000bdc:	08000c0c 	.word	0x08000c0c
 8000be0:	08000c0c 	.word	0x08000c0c
 8000be4:	08000c0c 	.word	0x08000c0c
 8000be8:	08000c10 	.word	0x08000c10

08000bec <_init>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	bf00      	nop
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr

08000bf8 <_fini>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr
